# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

opt_out_usage

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build all the tests without running them"
  lane :build_test do
    gradle(
      tasks: [
        "compileGoogle_playDebugUnitTestSources",
        "compileGoogle_playReleaseUnitTestSources",
        "compileStandardDebugUnitTestSources",
        "compileStandardReleaseUnitTestSources",
        "compileDebugUnitTestSources",
        "compileReleaseUnitTestSources",
        "bundleLibResDebug",
        "bundleLibResRelease",
        "bundleLibRuntimeToJarDebug",
        "bundleLibRuntimeToJarRelease",
              ],
    )
  end

  desc "Build all the instrumented tests without running them"
  lane :build_androidTest do
    gradle(
      task: "assembleAndroidTest",
    )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end

  desc "Build signed APK (flavor: standard ; type: Release)"
  lane :build_signed_apk_standard_release do
    gradle(
      task: 'clean'
    )
    build_android_app(
      task: 'assemble',
      flavor: 'Standard',
      build_type: 'Release',
      #properties: {
      #  "noVersionInArchivesBaseName" => "true",
      #}
    )
  end

  desc "Build amazon app store APK"
  lane :build_amazon_apk do
    build_signed_apk_standard_release
  end

  desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    #gradle(
    #  task: 'clean'
    #)
    build_android_app(
      task: 'assemble',
      flavor: 'Standard',
      build_type: 'Debug',
      properties: {
        "noVersionInArchivesBaseName" => "true",
      }
    )
    build_android_app(
      task: 'assemble',
      build_type: 'StandardDebugAndroidTest',
      properties: {
        "noVersionInArchivesBaseName" => "true",
      }
    )
  end

  desc "Copy sample pictures to the device"
  lane :copy_test_pics_for_screengrab do
    adb(
      #serial: 'emulator-5554',
      command: 'shell rm -fr /storage/emulated/0/ThumbAdder-sg'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'shell rm -fr /storage/emulated/0/DCIM/sg'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'shell mkdir -p /storage/emulated/0/DCIM/sg'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'push ../pic-exif-samples/jpg/Fujifilm_FinePix_E500.jpg /storage/emulated/0/DCIM/sg'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'push ../pic-exif-samples/jpg/Olympus_C8080WZ.jpg /storage/emulated/0/DCIM/sg'
    )
  end

  desc "Do screenshots"
  lane :screenshots do
    build_for_screengrab
    copy_test_pics_for_screengrab
    capture_android_screenshots(
      use_timestamp_suffix: false,
      clear_previous_screenshots: true,
      locales: ["en-US", "de-DE", "fr-FR", "vi-VN", "zh-CN"],
      ending_locale: "en-US",
      reinstall_app: true,
      app_package_name: "com.exifthumbnailadder.app.debug",
      tests_package_name: "com.exifthumbnailadder.app.debug.test",
      use_tests_in_classes: "com.exifthumbnailadder.app.TakeScreenshots",
      app_apk_path: "app/build/outputs/apk/standard/debug/exifthumbnailadder-standard-debug.apk",
      tests_apk_path: "app/build/outputs/apk/androidTest/standard/debug/exifthumbnailadder-standard-debug-androidTest.apk",
      #specific_device: "emulator-5554"
    )
  end

  desc "Prepare device for tests"
  lane :prepare_device_for_tests do
    adb(
      #serial: 'emulator-5554',
      command: 'shell mkdir -p /storage/emulated/0/DCIM/test_pics'
    )
    #adb(
    #  #serial: 'emulator-5554',
    #  command: 'push ../pic-exif-samples/jpg/ /storage/emulated/0/DCIM/test_pics'
    #)
  end

  desc "Run all the instrumented tests except screenshots"
  lane :connectedCheck do
    adb(
      # Get rid of `Viewing full screen, To exit, swipe down from the top` message
      # https://stackoverflow.com/a/62475026
      command: 'shell settings put secure immersive_mode_confirmations confirmed',
    )

    if ENV["CI"] == "true" && ENV["API_LEVEL"].to_i >= 30
      adb(
        # Turn off WiFi (to avoid using system resources for updates during tests)
        command: 'shell cmd -w wifi set-wifi-enabled disabled',
      )
    end

    if ENV["DELAY"]
      # Pause (in seconds) to let the system image in the emulator finish booting.
      sleep ENV["DELAY"].to_i
    end

    prepare_device_for_tests

    gradle(
      task: "connectedCheck",
      properties: {
        "excludeScreenshots" => "NULL",
      }
    )
  end

  desc "Run all the instrumented tests except screenshots and save screenrecords"
  lane :connectedCheck_with_screenrecord do
    begin
      connectedCheck
    rescue => ex
      test_failed = true
      UI.error(ex)
    end

    adb(
      command: 'pull /data/local/tmp/screenrecords/',
    )

    adb(
      command: 'shell rm -rf /data/local/tmp/screenrecords/',
    )

    if test_failed == true
      UI.shell_error! "connectedCheck lane failed."
    end
  end
end
