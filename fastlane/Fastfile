# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

opt_out_usage

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build all the tests without running them"
  lane :build_test do
    gradle(
      tasks: [
        "compileStandardDebugUnitTestSources",
        "compileStandardReleaseUnitTestSources",
        "compileDebugUnitTestSources",
        "compileReleaseUnitTestSources",
        "bundleLibResDebug",
        "bundleLibResRelease",
        "bundleLibRuntimeToJarDebug",
        "bundleLibRuntimeToJarRelease",
              ],
    )
  end

  desc "Build all the instrumented tests without running them"
  lane :build_androidTest do
    gradle(
      task: "assembleAndroidTest",
    )
  end

  desc "Build Release APK & AAB"
  lane :build_release do
    gradle(
      tasks: ["clean", "assembleStandardRelease", "bundleStandardRelease"]
    )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease bundleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    postpare_metadata_for_googleplay
    prepare_metadata_for_googleplay
    version_code = get_version_code
    version_name = get_version_name
    upload_to_play_store(
        aab: 'app/build/outputs/bundle/standardRelease/exifthumbnailadder-' + version_name + '-standard-release.aab',
        changes_not_sent_for_review: true,
        skip_upload_apk: true,
        skip_upload_changelogs: false,
        #version_code: version_code,
        skip_upload_metadata: false,
        skip_upload_images: false,
        skip_upload_screenshots: false,
    )
    postpare_metadata_for_googleplay
  end

  desc "get version_code"
  lane :get_version_code do
    lines = File.open("../version_last_tag.txt")
    lines.first.split("+")[1].strip
  end

  desc "get version_name"
  lane :get_version_name do
    lines = File.open("../version_last_tag.txt")
    tmp = lines.first.split("+")[0].strip
    tmp.split(" ")[1].strip
  end

  desc "Prepare matadata so that it is not rejected by google play"
  lane :prepare_metadata_for_googleplay do
    sh "../scripts/prepare_metadata_for_googleplay.sh"
  end

  desc "Postpare matadata - This restores to the state before the 'prepare'"
  lane :postpare_metadata_for_googleplay do
    sh "../scripts/post_metadata_for_googleplay.sh"
  end

  desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    #gradle(
    #  task: 'clean'
    #)
    build_android_app(
      task: 'assemble',
      flavor: 'Standard',
      build_type: 'Debug',
      properties: {
        "noVersionInArchivesBaseName" => "true",
      }
    )
    build_android_app(
      task: 'assemble',
      build_type: 'StandardDebugAndroidTest',
      properties: {
        "noVersionInArchivesBaseName" => "true",
      }
    )
  end

  desc "Do screenshots"
  lane :screenshots do
    build_for_screengrab
    prepare_device_for_tests
    capture_android_screenshots(
      use_timestamp_suffix: false,
      clear_previous_screenshots: true,
      locales: ["en-US", "de-DE", "fr-FR", "pt-BR", "tr-TR", "vi", "zh-CN"],
      ending_locale: "en-US",
      reinstall_app: true,
      app_package_name: "com.exifthumbnailadder.app.debug",
      tests_package_name: "com.exifthumbnailadder.app.debug.test",
      use_tests_in_classes: "com.exifthumbnailadder.app.TakeScreenshots",
      app_apk_path: "app/build/outputs/apk/standard/debug/exifthumbnailadder-standard-debug.apk",
      tests_apk_path: "app/build/outputs/apk/androidTest/standard/debug/exifthumbnailadder-standard-debug-androidTest.apk",
      #specific_device: "emulator-5554"
    )
  end

  desc "Do screenshots (sevenInch tablet)"
  lane :screenshots_sevenInch do
    build_for_screengrab
    prepare_device_for_tests
    capture_android_screenshots(
      use_timestamp_suffix: false,
      clear_previous_screenshots: true,
      locales: ["en-US", "de-DE", "fr-FR", "pt-BR", "tr-TR", "vi", "zh-CN"],
      ending_locale: "en-US",
      reinstall_app: true,
      app_package_name: "com.exifthumbnailadder.app.debug",
      tests_package_name: "com.exifthumbnailadder.app.debug.test",
      use_tests_in_classes: "com.exifthumbnailadder.app.TakeScreenshots",
      app_apk_path: "app/build/outputs/apk/standard/debug/exifthumbnailadder-standard-debug.apk",
      tests_apk_path: "app/build/outputs/apk/androidTest/standard/debug/exifthumbnailadder-standard-debug-androidTest.apk",
      device_type: "sevenInch",
      #specific_device: "emulator-5554"
    )
  end

  desc "disable animations on device"
  lane :disable_animation do
    adb(
      #serial: 'emulator-5554',
      command: 'shell settings put global window_animation_scale 0.0'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'shell settings put global transition_animation_scale 0.0'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'shell settings put global animator_duration_scale 0.0'
    )
  end

  desc "Prepare device for tests"
  lane :prepare_device_for_tests do
    disable_animation
    adb(
      #serial: 'emulator-5554',
      command: 'shell rm -fr /storage/emulated/0/DCIM/test_pics'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'shell mkdir -p /storage/emulated/0/DCIM/test_pics'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'push tests/data/exif-samples/jpg/* /storage/emulated/0/DCIM/test_pics'
    )
    adb(
      #serial: 'emulator-5554',
      command: 'push tests/data/empty_file tests/data/*.jpg tests/data/text_file.txt /storage/emulated/0/DCIM/test_pics'
    )
    # Uninstall the app so as to reset the MANAGE_EXTERNAL_STORAGE permission.
    # I haven't found another way to remove this permission once it's granted
    adb(
      command: 'shell pm uninstall com.exifthumbnailadder.app.debug || echo'
    )
    # Uninstall the previously installed test package. On github actions, don't removing it may give
    # Failed to install APK(s): exifthumbnailadder-*-standard-debug-androidTest.apk
    # INSTALL_FAILED_UPDATE_INCOMPATIBLE: Package com.exifthumbnailadder.app.debug.test signatures do not match the previously installed version; ignoring!
    adb(
      command: 'shell pm uninstall com.exifthumbnailadder.app.debug.test || echo'
    )
  end

  desc "Get test output from device"
  lane :get_output_of_tests do

    require 'fileutils'
    FileUtils.mkdir_p('../tests/output')

    adb(
      command: 'shell mkdir -p /data/local/tmp/screenrecords/'
    )
    adb(
      command: 'shell mkdir -p /data/local/tmp/test_output/'
    )
    adb(
      command: 'shell mkdir -p /storage/emulated/0/DCIM/test_pics/'
    )

    adb(
      command: 'pull -a /data/local/tmp/screenrecords/ tests/output/',
    )
    adb(
      command: 'pull -a /data/local/tmp/test_output/ tests/output/',
    )
    adb(
      command: 'pull -a /storage/emulated/0/DCIM/test_pics/ tests/output/',
    )
  end

  desc "Run all the instrumented tests except screenshots"
  lane :connectedCheck do |options|
    adb(
      # Get rid of `Viewing full screen, To exit, swipe down from the top` message
      # https://stackoverflow.com/a/62475026
      command: 'shell settings put secure immersive_mode_confirmations confirmed',
    )

    if ENV["CI"] == "true" && ENV["API_LEVEL"].to_i >= 30
      adb(
        # Turn off WiFi (to avoid using system resources for updates during tests)
        command: 'shell cmd -w wifi set-wifi-enabled disabled',
      )
    end

    if ENV["DELAY"]
      # Pause (in seconds) to let the system image in the emulator finish booting.
      sleep ENV["DELAY"].to_i
    end

    prepare_device_for_tests

    gradle(
      task: options[:task],
      properties: {
        "excludeScreenshots" => "NULL",
      }
    )
  end

  # To run only for a single flavor, run:
  # bundle exec fastlane connectedCheck_with_screenrecord task:connectedStandardDebugAndroidTest
  desc "Run all the instrumented tests except screenshots and save screenrecords"
  lane :connectedCheck_with_screenrecord do |options|

    adb(
      command: 'shell rm -rf /data/local/tmp/screenrecords/',
    )
    adb(
      command: 'shell rm -rf /data/local/tmp/test_output/',
    )

    if options[:task]
      begin
        connectedCheck(task: options[:task])
      rescue => ex
        test_failed = true
        UI.error(ex)
      end
    else
      # We split by flavor because with connectedCheck, as soon a one flavor has a failing test,
      # then the subsequent flavors are skipped.
      begin
        connectedCheck(task: "connectedStandardDebugAndroidTest")
      rescue => ex
        test_failed = true
        UI.error(ex)
      end
    end

    get_output_of_tests

    if test_failed == true
      UI.shell_error! "connectedCheck lane failed."
    end
  end
end
