name: ETA tests
on: [push, pull_request]

env:
  GRADLE_COMMON_ARGS:

jobs:

  build:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Fix timestamps
      - name: restore timestamps
        uses: chetan/git-restore-mtime-action@v1

      # Since NDK & Cmake timestamps are used by ninja to determine if a target is up-to-date
      # and since installation of these files with SKD manager gives the files the timestamp of installation
      # We have to manually set a fixed timestamp accross all jobs
      - name: Check if we must use local Android NDK & CMAKE
        run: |
          set -x
          NDK_VERSION=$(grep "NDK_VERSION" app/gradle.properties | cut -d "=" -f 2)
          echo "NDK_VERSION=$NDK_VERSION" >> $GITHUB_ENV
          CMAKE_VERSION=$(grep "SDK_CMAKE_VERSION" app/gradle.properties | cut -d "=" -f 2)
          echo "CMAKE_VERSION=$CMAKE_VERSION" >> $GITHUB_ENV
          if [ ! -e $ANDROID_SDK_ROOT/ndk/$NDK_VERSION ]; then
            echo "ANDROID_NDK_IS_LOCAL_DOWNLOAD=1" >> $GITHUB_ENV
          fi
          if [ ! -e $ANDROID_SDK_ROOT/cmake/$CMAKE_VERSION ]; then
            echo "ANDROID_CMAKE_IS_LOCAL_DOWNLOAD=1" >> $GITHUB_ENV
          fi
          echo "done"

      - name: download some SDK components & touch with fixed date
        run: |
          set -x
          if [ $ANDROID_NDK_IS_LOCAL_DOWNLOAD -eq 1 ]; then
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "ndk;$NDK_VERSION"
            find $ANDROID_SDK_ROOT/ndk/$NDK_VERSION -exec touch -t 202301010000 '{}' \;
          fi
          if [ $ANDROID_CMAKE_IS_LOCAL_DOWNLOAD -eq 1 ]; then
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "cmake;$CMAKE_VERSION"
            find $ANDROID_SDK_ROOT/cmake/$CMAKE_VERSION -exec touch -t 202301010000 '{}' \;
          fi
          echo "done"

      - name: Create ninja wrapper
        if: ${{ env.ANDROID_CMAKE_IS_LOCAL_DOWNLOAD == 1 }}
        run: |
            set -x
            export NINJACMD=$ANDROID_SDK_ROOT/cmake/$CMAKE_VERSION/bin/ninja &&
            mv "$NINJACMD" "$NINJACMD".orig &&
            echo "#!/bin/sh" > "$NINJACMD" &&
            #echo "$NINJACMD.orig -d explain -v \$@" >> "$NINJACMD" &&
            echo "$NINJACMD.orig -v \$@" >> "$NINJACMD" &&
            chmod +x "$NINJACMD" &&
            touch -r "$NINJACMD".orig "$NINJACMD" &&
            echo "content of "$NINJACMD"" &&
            cat "$NINJACMD" &&
            echo "done"

      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build app with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            ${{ env.GRADLE_COMMON_ARGS }}
            assembleDebug
            assembleAndroidTest
            compileStandardDebugUnitTestSources
            compileStandardReleaseUnitTestSources
            compileDebugUnitTestSources
            compileReleaseUnitTestSources
            bundleLibResDebug
            bundleLibResRelease
            bundleLibRuntimeToJarDebug
            bundleLibRuntimeToJarRelease

      - uses: actions/cache/save@v3
        id: cache
        with:
          path: |
            app/build/
            app/.cxx/
            version_last_tag.txt
            .gradle/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            ~/.android/debug.keystore
          key: build-macos-${{ github.run_id }}
      - uses: actions/cache/save@v3
        if: ${{ env.ANDROID_NDK_IS_LOCAL_DOWNLOAD == 1 }}
        id: cache-ndk
        with:
          path: |
            /Users/runner/Library/Android/sdk/ndk/${{ env.NDK_VERSION }}/
          key: build-macos-localNdk-${{ github.run_id }}
      - uses: actions/cache/save@v3
        if: ${{ env.ANDROID_CMAKE_IS_LOCAL_DOWNLOAD == 1 }}
        id: cache-cmake
        with:
          path: |
            /Users/runner/Library/Android/sdk/cmake/${{ env.CMAKE_VERSION }}/
          key: build-macos-localCmake-${{ github.run_id }}

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-outputs-macos-run${{ github.run_attempt }}
          path: |
            version_last_tag.txt
            app/build/outputs/

  buildWithPrebuiltLibs:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup and execute Gradle 'assembleRelease -PusePrebuiltLib=true' task
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleRelease -PusePrebuiltLib=true ${{ env.GRADLE_COMMON_ARGS }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-outputs-linux-with-prebuilt-libs-run${{ github.run_attempt }}
          path: |
            version_last_tag.txt
            app/build/outputs/

  buildWindows:
    runs-on: windows-latest
    needs: buildWithPrebuiltLibs
    steps:
      - name: checkout
        uses: actions/checkout@v3
      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup and execute Gradle 'assembleDebug' task
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug ${{ env.GRADLE_COMMON_ARGS }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-outputs-windows-run${{ github.run_attempt }}
          path: |
            version_last_tag.txt
            app/build/outputs/

  test:
    #continue-on-error: true
    env:
      with_avd_cache: true
    runs-on: macos-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        api-level: [26, 27, 28, 29, 30, 31]
        #target: [default, google_apis] #Keep only 1 target until https://github.com/ReactiveCircus/android-emulator-runner/issues/278 is fixed
        target: [google_apis]
        include:
          - arch: x86
          - ram-size: 3072M
# Re-enable below when default target is enabled again
#          - api-level: 30
#            target: default
#            arch: x86_64
          - api-level: 31
            arch: x86_64
# Reenable when flakiness is solved on the github runner with API 32 & 33
# See: https://github.com/ReactiveCircus/android-emulator-runner/discussions/286
#          - api-level: 32
#            target: google_apis
#            arch: x86_64
#            ram-size: 3072M
#          - api-level: 33
#            target: google_apis
#            arch: x86_64
#            ram-size: 3072M

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Fix timestamps
      - name: restore timestamps
        uses: chetan/git-restore-mtime-action@v1

      # Get test pictures
      - name: checkout
        uses: actions/checkout@v3
        with:
          repository: 'ianare/exif-samples'
          path: 'tests/data/exif-samples'

      - name: |
          set timestamp of sample pictures to fixed date: 2021-07-01 09:18
        run: find tests/data/exif-samples | xargs touch -t 202107010918

      - name: Check if we must use local Android NDK & CMAKE
        run: |
          set -x
          NDK_VERSION=$(grep "NDK_VERSION" app/gradle.properties | cut -d "=" -f 2)
          echo "NDK_VERSION=$NDK_VERSION" >> $GITHUB_ENV
          CMAKE_VERSION=$(grep "SDK_CMAKE_VERSION" app/gradle.properties | cut -d "=" -f 2)
          echo "CMAKE_VERSION=$CMAKE_VERSION" >> $GITHUB_ENV
          if [ ! -e $ANDROID_SDK_ROOT/ndk/$NDK_VERSION ]; then
            echo "ANDROID_NDK_IS_LOCAL_DOWNLOAD=1" >> $GITHUB_ENV
          fi
          if [ ! -e $ANDROID_SDK_ROOT/cmake/$CMAKE_VERSION ]; then
            echo "ANDROID_CMAKE_IS_LOCAL_DOWNLOAD=1" >> $GITHUB_ENV
          fi
          echo "done"

      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - uses: actions/cache/restore@v3
        with:
          path: |
            app/build/
            app/.cxx/
            version_last_tag.txt
            .gradle/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            ~/.android/debug.keystore
          key: build-macos-${{ github.run_id }}
      - uses: actions/cache/restore@v3
        if: ${{ env.ANDROID_NDK_IS_LOCAL_DOWNLOAD == 1 }}
        id: cache-ndk
        with:
          path: |
            /Users/runner/Library/Android/sdk/ndk/${{ env.NDK_VERSION }}/
          key: build-macos-localNdk-${{ github.run_id }}
      - uses: actions/cache/restore@v3
        if: ${{ env.ANDROID_CMAKE_IS_LOCAL_DOWNLOAD == 1 }}
        id: cache-cmake
        with:
          path: |
            /Users/runner/Library/Android/sdk/cmake/${{ env.CMAKE_VERSION }}/
          key: build-macos-localCmake-${{ github.run_id }}

      - name: AVD cache
        if: ${{ env.with_avd_cache == 'true' }}
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}

      - name: create AVD and generate snapshot for caching (${{ matrix.api-level }}, ${{ matrix.target }}, ${{ matrix.arch }})
        if: ${{ env.with_avd_cache == 'true' &&  steps.avd-cache.outputs.cache-hit != 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: ${{ matrix.ram-size }}
          profile: pixel_2
          heap-size: 512M
          disk-size: 8G
          sdcard-path-or-size: 200M
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests with avd cache (${{ matrix.api-level }}, ${{ matrix.target }}, ${{ matrix.arch }})
        if: ${{ env.with_avd_cache == 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: ${{ matrix.ram-size }}
          profile: pixel_2
          heap-size: 512M
          disk-size: 8G
          sdcard-path-or-size: 200M
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: API_LEVEL=${{ matrix.api-level }} fastlane connectedCheck_with_screenrecord

      - name: run tests without avd cache (${{ matrix.api-level }}, ${{ matrix.target }}, ${{ matrix.arch }})
        if: ${{ env.with_avd_cache != 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: ${{ matrix.ram-size }}
          profile: pixel_2
          heap-size: 512M
          disk-size: 8G
          sdcard-path-or-size: 200M
          script: API_LEVEL=${{ matrix.api-level }} fastlane connectedCheck_with_screenrecord

      # actions/upload-artifact@v3 doesn't keep timestamps, so use tar as an intermediate
      # Moreover, by using this intermediate file, the files created by the test suite won't be inside the artifact
      - name: Tar tests/output artifacts
        run: tar -cf test_output_artifact.tar --exclude="tests/output/screenrecords" tests/output/

      - name: Install tools for bash tests
        if: always()
        #if: ${{ false }} # Don't run them for now because locally I use the perl version of findimagedupes which is different
        run: |
          set -x
          #set
          #echo HOME=$HOME

          brew install exiv2
          brew install exiftool
          brew install imagemagick@6

          # gnu-sed is also needed
          brew install gnu-sed

          # Dependencies for findimagedupes
          # Graphics::Magick is provided by graphicsmagick
          brew install graphicsmagick

          # Install PerlMagick from GraphicsMagick to have Graphics::Magick
          wget https://netcologne.dl.sourceforge.net/project/graphicsmagick/graphicsmagick/1.3.40/GraphicsMagick-1.3.40.tar.xz
          tar -xf GraphicsMagick-1.3.40.tar.xz
          cd GraphicsMagick-1.3.40

          # Configure with the same configure arguments as homebrew, but with "--with-perl=yes"
          ./configure \
            --prefix=/usr/local \
            --disable-dependency-tracking \
            --disable-openmp \
            --disable-static \
            --enable-shared \
            --with-modules \
            --with-quantum-depth=16 \
            --without-lzma \
            --without-x \
            --without-gslib \
            --with-gs-font-dir=/usr/local/share/ghostscript/fonts \
            --without-wmf \
            --with-jxl \
            --with-perl=yes
          cd PerlMagick
          perl Makefile.PL
          make
          sudo make install

          sudo perl -MCPAN -e 'CPAN::Shell->rematein("notest", "install", "File::MimeInfo")'
          sudo perl -MCPAN -e 'CPAN::Shell->rematein("notest", "install", "File::MimeInfo::Magic")'
          sudo perl -MCPAN -e 'CPAN::Shell->rematein("notest", "install", "Inline")'
          sudo perl -MCPAN -e 'CPAN::Shell->rematein("notest", "install", "Inline::C")'

          # Install findimagedupes
          wget https://raw.githubusercontent.com/jhnc/findimagedupes/2.20.1/findimagedupes
          chmod +x findimagedupes
          gsed -i 's#usr/bin/perl#usr/bin/env perl#' findimagedupes
          gsed -i 's#'\''/usr/local/lib/findimagedupes'\''#$ENV{"HOME"}#' findimagedupes
          sudo mv findimagedupes /usr/local/bin

          # Run findimagedupes (check it works)
          findimagedupes


      - name: Run bash tests
        if: always()
        run: |
          # run tests
          set -x
          cd tests && ./run_tests.sh || true

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-api${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}-run${{ github.run_attempt }}-reports
          path: |
            version_last_tag.txt
            app/build/reports/

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-api${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}-run${{ github.run_attempt }}-screenrecords
          path: |
            version_last_tag.txt
            tests/output/screenrecords/

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-api${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}-run${{ github.run_attempt }}-output
          path: |
            test_output_artifact.tar

# From: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#force-deleting-cache-entries
  cleanup-cache:
    runs-on: ubuntu-latest
    #if: ${{ always() }} # If tests failed, we don't want to remove the build cache in case we want to rerun the failed tests
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH=${{ github.ref_name }}

          for cachePrefix in build-macos build-macos-localNdk build-macos-localCmake; do
            echo "Fetching list of cache key"
            #cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )
            cacheKeysForPR=$cachePrefix-${{ github.run_id }}

            ## Setting this to not fail the workflow while deleting cache keys.
            set +e
            echo "Deleting caches..."
            for cacheKey in $cacheKeysForPR
            do
                gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
            done
          done

          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
