name: ETA tests
on: [push, pull_request]

env:
  GRADLE_COMMON_ARGS: -PexcludeScreenshots=NULL
  CMAKE_VERSION: 3.10.2.4988404
  NDK_VERSION: 23.1.7779620

jobs:

  build:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Fix timestamps
      - name: restore timestamps
        uses: chetan/git-restore-mtime-action@v1

      # Since NDK & Cmake timestamps are used by ninja to determine if a target is up-to-date
      # and since installation of these files with SKD manager gives the files the timestamp of installation
      # We have to manually set a fixed timestamp accross all jobs
      - name: download some SDK components & touch with fixed date
        run: |
            set -x
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "ndk;$NDK_VERSION" &&
            find $ANDROID_SDK_ROOT/ndk/$NDK_VERSION -exec touch -t 202301010000 '{}' \; &&
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "cmake;$CMAKE_VERSION" &&
            find $ANDROID_SDK_ROOT/cmake/$CMAKE_VERSION -exec touch -t 202301010000 '{}' \; &&
            echo "done"

      - name: Create ninja wrapper
        run: |
            set -x
            export NINJACMD=$ANDROID_SDK_ROOT/cmake/$CMAKE_VERSION/bin/ninja &&
            mv "$NINJACMD" "$NINJACMD".orig &&
            echo "#!/bin/sh" > "$NINJACMD" &&
            #echo "$NINJACMD.orig -d explain -v \$@" >> "$NINJACMD" &&
            echo "$NINJACMD.orig -v \$@" >> "$NINJACMD" &&
            chmod +x "$NINJACMD" &&
            touch -r "$NINJACMD".orig "$NINJACMD" &&
            echo "content of "$NINJACMD"" &&
            cat "$NINJACMD" &&
            echo "done"

      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup and execute Gradle 'assembleDebug' task
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug ${{ env.GRADLE_COMMON_ARGS }}
      - uses: actions/cache/save@v3
        id: cache
        with:
          path: |
            app/build/
            app/.cxx/
            version_last_tag.txt
            .gradle/
            ~/.gradle/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            ~/.android/debug.keystore
            /Users/runner/Library/Android/sdk/cmake/${{ env.CMAKE_VERSION }}/
            /Users/runner/Library/Android/sdk/ndk/${{ env.NDK_VERSION }}/
          key: build-macos-${{ github.run_id }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: outputs-macos-run${{ github.run_attempt }}
          path: |
            app/build/outputs/

  buildWithPrebuiltLibs:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup and execute Gradle 'assembleDebug -PusePrebuiltLib=true' task
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleRelease -PusePrebuiltLib=true ${{ env.GRADLE_COMMON_ARGS }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: outputs-linux-with-prebuilt-libs-run${{ github.run_attempt }}
          path: |
            app/build/outputs/

  buildWindows:
    runs-on: windows-latest
    needs: buildWithPrebuiltLibs
    steps:
      - name: checkout
        uses: actions/checkout@v3
      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup and execute Gradle 'assembleDebug' task
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug ${{ env.GRADLE_COMMON_ARGS }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: outputs-windows-run${{ github.run_attempt }}
          path: |
            app/build/outputs/

  test:
    #continue-on-error: true
    env:
      with_avd_cache: true
    runs-on: macos-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        api-level: [26, 27, 28, 29, 30, 31]
        #target: [default, google_apis] #Keep only 1 target until https://github.com/ReactiveCircus/android-emulator-runner/issues/278 is fixed
        target: [google_apis]
        include:
          - arch: x86
          - ram-size: 3072M
# Re-enable below when default target is enabled again
#          - api-level: 30
#            target: default
#            arch: x86_64
          - api-level: 31
            arch: x86_64
          - api-level: 32
            target: google_apis
            arch: x86_64
            ram-size: 3072M
          - api-level: 33
            target: google_apis
            arch: x86_64
            ram-size: 3072M

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Fix timestamps
      - name: restore timestamps
        uses: chetan/git-restore-mtime-action@v1

      # Switch to java 11 since AGP requires java 11
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - uses: actions/cache/restore@v3
        with:
          path: |
            app/build/
            app/.cxx/
            version_last_tag.txt
            .gradle/
            ~/.gradle/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            library/pixymeta-android/build/
            library/Android-Exif-Extended/build/
            ~/.android/debug.keystore
            /Users/runner/Library/Android/sdk/cmake/${{ env.CMAKE_VERSION }}/
            /Users/runner/Library/Android/sdk/ndk/${{ env.NDK_VERSION }}/
          key: build-macos-${{ github.run_id }}

      - name: AVD cache
        if: ${{ env.with_avd_cache == 'true' }}
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}

      - name: create AVD and generate snapshot for caching (${{ matrix.api-level }}, ${{ matrix.target }}, ${{ matrix.arch }})
        if: ${{ env.with_avd_cache == 'true' &&  steps.avd-cache.outputs.cache-hit != 'true' }}
        uses: tenzap/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: ${{ matrix.ram-size }}
          heap-size: 512M
          disk-size: 8G
          sdcard-path-or-size: 200M
          after-boot-delay: 300
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests with avd cache (${{ matrix.api-level }}, ${{ matrix.target }}, ${{ matrix.arch }})
        if: ${{ env.with_avd_cache == 'true' }}
        uses: tenzap/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: ${{ matrix.ram-size }}
          heap-size: 512M
          disk-size: 8G
          sdcard-path-or-size: 200M
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: API_LEVEL=${{ matrix.api-level }} DELAY=60 fastlane connectedCheck_with_screenrecord

      - name: run tests without avd cache (${{ matrix.api-level }}, ${{ matrix.target }}, ${{ matrix.arch }})
        if: ${{ env.with_avd_cache != 'true' }}
        uses: tenzap/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: ${{ matrix.ram-size }}
          heap-size: 512M
          disk-size: 8G
          sdcard-path-or-size: 200M
          after-boot-delay: 300
          script: API_LEVEL=${{ matrix.api-level }} DELAY=60 fastlane connectedCheck_with_screenrecord

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}-run${{ github.run_attempt }}
          path: |
            app/build/reports/
            screenrecords/

# From: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#force-deleting-cache-entries
  cleanup-cache:
    runs-on: ubuntu-latest
    #if: ${{ always() }} # If tests failed, we don't want to remove the build cache in case we want to rerun the failed tests
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH=${{ github.ref_name }}

          echo "Fetching list of cache key"
          #cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )
          cacheKeysForPR=build-macos-${{ github.run_id }}

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
